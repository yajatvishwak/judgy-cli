import click
import json
from dotenv import load_dotenv
from commons.transcribe.transcribe import Transcribe
from commons.pdfparser.pdfparser import PDFParser
from commons.summarise.summarise import SummariseAgent
from commons.videoutils.videoutils import VideoUtils

from rate.presentation.presentation_agent import PresentationAgent
from rate.business.business_agent import BusinessAgent
from rate.originality.originality_agent import OriginalityAgent
import warnings
import os


@click.group()
def cli():
    pass


@click.command(
    name="preprocess",
    help="get all the required data before calling any agent, returns transcription from the video, pdf content and summarization",
)
@click.option(
    "--video_link",
    required=True,
    prompt="location of the presentation video (.mp4 format only)",
    help="location of the presentation video (.mp4 format only)",
)
@click.option(
    "--pdf_link",
    required=True,
    prompt="location of the submission pdf (.pdf format only)",
    help="location of the submission pdf (.pdf format only)",
)
@click.option(
    "--title",
    required=True,
    prompt="name of the project",
    help="name of the project",
)
@click.option(
    "--output_location",
    prompt="output location of the results",
    help="output location of the results (leave blank, if you want to echo output to terminal)",
)
def preprocess(video_link, pdf_link, output_location, title):
    p = PDFParser()
    t = Transcribe()
    s = SummariseAgent()
    v = VideoUtils()
    video_length = v.get_video_length(video_link=video_link)
    transcription = t.get_transcription(video_link=video_link)
    pdf_content = p.get_pdf_content(pdf_link=pdf_link)
    summary = s.summarise(
        f"Video Transcript: {transcription}\n PDF Content: {pdf_content}"
    )

    output = {
        "transcription": transcription,
        "pdf_content": pdf_content,
        "summary": summary,
        "video_length": video_length,
    }
    if output_location:
        if os.path.isdir(output_location):
            with open(
                os.path.join(output_location, title + "_preprocess.json"), "w"
            ) as outfile:
                json.dump(output, outfile)
        else:
            with open(output_location, "w") as outfile:
                json.dump(output, outfile)
    else:
        click.echo(json.dumps(output))


@click.command(
    name="presentation",
    help="score the presentation of the project",
)
@click.option(
    "--summary",
    prompt="summary of the project (generated by judgy's preprocess command)",
    required=True,
    help="summary of the project (generated by judgy's preprocess command)",
)
@click.option(
    "--presentation_length",
    prompt="presentation length",
    required=True,
    help="presentation length",
)
@click.option(
    "--title",
    required=True,
    prompt="name of the project",
    help="name of the project",
)
@click.option(
    "--output_location",
    prompt="output location of the presentation results",
    help="output location of the  presentation results (leave blank, if you want to echo output to terminal)",
)
def presentation(summary, presentation_length, output_location, title):
    pa = PresentationAgent(
        presentation_video_length=presentation_length, summary=summary
    )
    output = pa.score()
    if output_location:
        if os.path.isdir(output_location):
            with open(
                os.path.join(output_location, title + "_presentation_scores.json"), "w"
            ) as outfile:
                json.dump(output, outfile)
        else:
            with open(output_location, "w") as outfile:
                json.dump(output, outfile)
    else:
        click.echo(json.dumps(output))


@click.command(
    name="business",
    help="score the business of the project",
)
@click.option(
    "--summary",
    prompt="summary of the project (generated by judgy's preprocess command)",
    required=True,
    help="summary of the project (generated by judgy's preprocess command)",
)
@click.option(
    "--title",
    required=True,
    prompt="name of the project",
    help="name of the project",
)
@click.option(
    "--output_location",
    prompt="output location of the results",
    help="output location of the  results (leave blank, if you want to echo output to terminal)",
)
def business(summary, output_location, title):
    pa = BusinessAgent(summary=summary)
    output = pa.score()
    if output_location:
        if os.path.isdir(output_location):
            with open(
                os.path.join(output_location, title + "_business_scores.json"), "w"
            ) as outfile:
                json.dump(output, outfile)
        else:
            with open(output_location, "w") as outfile:
                json.dump(output, outfile)
    else:
        click.echo(json.dumps(output))


@click.command(
    name="originality",
    help="score the originality of the project",
)
@click.option(
    "--summary",
    prompt="summary of the project (generated by judgy's preprocess command)",
    required=True,
    help="summary of the project (generated by judgy's preprocess command)",
)
@click.option(
    "--title",
    required=True,
    prompt="name of the project",
    help="name of the project",
)
@click.option(
    "--output_location",
    prompt="output location of the presentation results",
    help="output location of the  presentation results (leave blank, if you want to echo output to terminal)",
)
def originality(summary, output_location, title):
    pa = OriginalityAgent(summary=summary)
    output = pa.score()
    if output_location:
        if os.path.isdir(output_location):
            with open(
                os.path.join(output_location, title + "_originality_scores.json"), "w"
            ) as outfile:
                json.dump(output, outfile)
        else:
            with open(output_location, "w") as outfile:
                json.dump(output, outfile)
    else:
        click.echo(json.dumps(output))


cli.add_command(preprocess)
cli.add_command(presentation)
cli.add_command(business)
cli.add_command(originality)

if __name__ == "__main__":
    warnings.filterwarnings("ignore")
    load_dotenv()
    cli()
